# name: "Build iOS app"

# on:
#   # manual trigger but change to any supported event
#   # see addl: https://www.andrewhoog.com/post/how-to-build-react-native-android-app-with-github-actions/#3-run-build-workflow
#   push:
#     branches:
#       - main
#       - master
#       - develop
#       - cicd

# jobs:
#   build_with_signing:
#     runs-on: macos-latest
#     steps:
#       # this was more debug as was curious what came pre-installed
#       # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
#       - name: check Xcode version
#         run: /usr/bin/xcodebuild -version

#       - name: checkout repository
#         uses: actions/checkout@v3

#       - name: Install Flutter
#         uses: subosito/flutter-action@v2
#         with:
#           flutter-version: '3.22.2'

#       - name: Install the Apple certificate and provisioning profile
#         env:
#           BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
#           P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#           BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#           KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#         run: |
#           # create variables
#           CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#           PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#           KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

#           # import certificate and provisioning profile from secrets
#           echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
#           echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

#           # create temporary keychain
#           security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#           security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#           security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

#           # import certificate to keychain
#           security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#           security list-keychain -d user -s $KEYCHAIN_PATH

#           # apply provisioning profile
#           mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#           cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles          

#       - name: build archive
#         run: |
#           cd bineo-mobile/ios
#           flutter pub get
#           pod install
#           xcodebuild -scheme "Runner" \
#           -archivePath $RUNNER_TEMP/runner.xcarchive \
#           -sdk iphoneos \
#           -configuration Debug \
#           -destination generic/platform=iOS \
#           clean archive          

#       - name: export ipa
#         env:
#           EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
#         run: |
#           EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
#           echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
#           xcodebuild -exportArchive -archivePath $RUNNER_TEMP/iamgroot.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build          

#       - name: Upload application
#         uses: actions/upload-artifact@v3
#         with:
#           name: app
#           path: ${{ runner.temp }}/build/runner.ipa
#           # you can also archive the entire directory 
#           # path: ${{ runner.temp }}/build
#           retention-days: 3

on:
  pull_request:
    branches:
      - main
      - master
      - cicd
  push:
    branches:
      - main
      - master
      - develop
      - cicd

name: "Build & Release"
jobs:
  build:
    name: Build & Release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17.x'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'
      - run: flutter --version
      - name: Run Flutter Doctor
        run: flutter doctor -v
      - run: |
          mkdir -p $HOME/Library/Android/sdk
          cd $HOME/Library/Android/sdk
          curl -o commandlinetools-mac.zip https://dl.google.com/android/repository/commandlinetools-mac-7583922_latest.zip
          unzip commandlinetools-mac.zip -d cmdline-tools
          mv cmdline-tools/cmdline-tools cmdline-tools/latest
          export ANDROID_HOME=$HOME/Library/Android/sdk
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin
          export PATH=$PATH:$ANDROID_HOME/platform-tools
        
          cd /Users/runner/work/bineo-app/bineo-app/bineo-mobile
          touch .env
          echo "${{ secrets.ENV_DATA_FILE }}" | while IFS= read -r line; do
            echo "\"$line\"" >> .env
          done
          touch android/local.properties
          echo "${{ secrets.GRADLE_PROPERTIES }}" >> android/local.properties
          sdkmanager --install "platform-tools" "platforms;android-34" "build-tools;35.0.0"
          yes | sdkmanager --licenses
          sdkmanager --list
          cat android/gradle/wrapper/gradle-wrapper.properties
          cat android/local.properties
          echo $HOME/Library/Android/sdk
          echo "sdk.dir=/Users/runner/Library/Android/sdk" > android/local.properties
          echo "flutter.sdk=/Users/runner/hostedtoolcache/flutter/stable-3.22.2-arm64" >> android/local.properties
          flutter pub get
          flutter build apk --debug

      - name: Upload application
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: /Users/runner/work/bineo-app/bineo-app/bineo-mobile/build/app/outputs/flutter-apk/app-debug.apk

          retention-days: 3